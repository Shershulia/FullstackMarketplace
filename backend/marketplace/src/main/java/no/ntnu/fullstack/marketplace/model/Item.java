package no.ntnu.fullstack.marketplace.model;

import jakarta.persistence.*;

import java.util.List;

/**
 The Item class represents an item for sale in a marketplace. It is an entity class
 mapped to a database table named "ITEMDATA" using Jakarta Persistence annotations.
 The class has the following properties:
 id: a unique identifier for the item
 name: the name of the item
 description: a description of the item
 userid: the ID of the user who posted the item
 price: the price of the item
 location: the location of the item
 image: a list of image URLs for the item
 categories: a list of categories that the item belongs to
 metadata: a list of metadata information for the item
 The class provides getter and setter methods for all of its properties.
 */
@Entity
@Table(name = "ITEMDATA")
public class Item {
    /**
     * The id field represents the item's id in the database. It is automatically generated by the database when a new item is created. It is used to identify an item in the database.
     * The field is annotated with @Id to indicate that it is the primary key for the table.
     * The field is annotated with @GeneratedValue to indicate that the id is automatically generated by the database when a new item is created. This means that the id is unique for each item, and that it is automatically generated when a new item is created.
     *
     */
    @Id
    @GeneratedValue (strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name field represents the item's name. It is used to identify the item in the system.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "name", nullable = false)
    private String name;

    /**
     * The description field represents the item's description. It is used to describe the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "description", nullable = false)
    private String description;

    /**
     * The userid field represents the item's owner. It is used to identify the owner of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "userid", nullable = false)
    private Long userid;

    /**
     * The price field represents the item's price. It is used to identify the price of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "price")
    private Long price;

    /**
     * The location field represents the item's location. It is used to identify the location of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "location", nullable = false)
    private String location;

    /**
     * The image field represents the item's image. It is used to identify the image of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "image", nullable = false)
    private List<String> image;

    /**
     * The categories field represents the item's categories. It is used to identify the categories of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "categories")
    private List<String> categories;

    /**
     * The metadata field represents the item's metadata. It is used to identify the metadata of the item.
     * The field is annotated with @Column to indicate that it is a column in the table.
     * The field is annotated with @NotNull to indicate that the field cannot be null.
     */
    @Column (name = "metadata")
    private List<String> metadata;

    /**
     * The constructor for the Item class. It is used to create a new Item object. It does not take any parameters. Default requred by JPA.
     */
    public Item() {
    }

    /**
     * Get method for the id property. It is used to get the value of the id property.
     * @return id The id of the item. It is a Long.
     */
    public Long getId() {
        return id;
    }

    /**
     * Set method for the id property. It is used to set the value of the id property.
     * @param id The id of the item. It is a Long.
     */
    public void setId(Long id) {
        this.id = id;
    }


    /**
     * Get method for the name property. It is used to get the value of the name property.
     * @return name The name of the item. It is a String.
     */
    public String getName() {
        return name;
    }


    /**
     * Set method for the name property. It is used to set the value of the name property.
     * @param name The name of the item. It is a String.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get method for the description property. It is used to get the value of the description property.
     * @return description The description of the item. It is a String.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Set method for the description property. It is used to set the value of the description property.
     * @param description The description of the item. It is a String.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Get method for the userid property. It is used to get the value of the userid property.
     * @return userid The userid of the item. It is a Long.
     */
    public Long getUserId() {
        return userid;
    }

    /**
     * Set method for the userid property. It is used to set the value of the userid property.
     * @param userid The userid of the item. It is a Long.
     */
    public void setUser(Long userid) {
        this.userid = userid;
    }

    /**
     * Get method for the price property. It is used to get the value of the price property.
     * @return price The price of the item. It is a Long.
     */
    public Long getPrice() {
        return price;
    }

    /**
     * Set method for the price property. It is used to set the value of the price property.
     * @param price The price of the item. It is a Long.
     */
    public void setPrice(Long price) {
        this.price = price;
    }

    /**
     * Get method for the location property. It is used to get the value of the location property.
     * Where the item is located, such as a city or state. Should be identifying enough to be able to find the item in real life.
     * @return location The location of the item. It is a String.
     */
    public String getLocation() {
        return location;
    }

    /**
     * Set method for the location property. It is used to set the value of the location property.
     * @param location The location of the item. It is a String.
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Get method for the categories property. It is used to get the value of the categories property.
     * @return categories The categories of the item. It is a List<String>.
     */
    public List<String> getCategories() {
        return categories;
    }

    /**
     * Set method for the categories property. It is used to set the value of the categories property.
     * @param categories The categories of the item. It is a List<String>.
     */
    public void setCategories(List<String> categories) {
        this.categories = categories;
    }

    /**
     * Get method for the metadata property. It is used to get the value of the metadata property.
     * @return metadata The metadata of the item. It is a List<String>.
     */
    public List<String> getMetadata() {
        return metadata;
    }

    /**
     * Set method for the metadata property. It is used to set the value of the metadata property.
     * @param metadata The metadata of the item. It is a List<String>.
     */
    public void setMetadata(List<String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Get method for the image property. It is used to get the value of the image property.
     * @return image The image of the item. It is a List<String>.
     */
    public Long getUserid() {
        return userid;
    }

    /**
     * Set method for the image property. It is used to set the value of the image property.
     * @param userid The image of the item. It is a List<String>.
     */
    public void setUserid(Long userid) {
        this.userid = userid;
    }

    /**
     * Get method for the image property. It is used to get the value of the image property.
     * The strings in the list are links to the source of the images of the item, shall be a image url
     * @return image The image of the item. It is a List<String>.
     */
    public List<String> getImage() {
        return image;
    }

    /**
     * Set method for the image property. It is used to set the value of the image property.
     * The strings in the list are links to the source of the images of the item, shall be a image url
     * @param image The image of the item. It is a List<String>.
     */

    public void setImage(List<String> image) {
        this.image = image;
    }
}
